class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []
        self.graph[u].append(v)

    def depth_limited_search(self, node, goal, depth, visited):
        if node == goal:
            return True
        if depth <= 0:
            return False

        visited.add(node)
        for neighbor in self.graph.get(node, []):
            if neighbor not in visited:
                if self.depth_limited_search(neighbor, goal, depth - 1, visited):
                    return True
        visited.remove(node)
        return False

    def iterative_deepening_search(self, start, goal, max_depth):
        for depth in range(max_depth + 1):
            visited = set()
            if self.depth_limited_search(start, goal, depth, visited):
                return True
        return False



g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 3)
g.add_edge(1, 4)
g.add_edge(2, 5)
g.add_edge(2, 6)

goal_found = g.iterative_deepening_search(0, 6, 3)
print("Goal found" if goal_found else "Goal not found")
