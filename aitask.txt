#1
def minimax(depth, nodeIndex, isMax, scores, alpha, beta):
    if depth == 3:
        return scores[nodeIndex]
    if isMax:
        best = float('-inf')
        for i in range(2):
            val = minimax(depth + 1, nodeIndex * 2 + i, False, scores, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)
            if beta <= alpha:
                break  
        return best
    else:
        best = float('inf')
        for i in range(2):
            val = minimax(depth + 1, nodeIndex * 2 + i, True, scores, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)
            if beta <= alpha:
                break  
        return best
scores = [3, 5, 6, 9, 1, 2, 0, -1]
print("Optimal value is:", minimax(0, 0, True, scores, float('-inf'), float('inf')))

#2


P = 2/7
Q = 4/7
R = 4/9

P_not = 1 - P
Q_not = 1 - Q
R_not = 1 - R

prob_solved = 1 - (P_not * Q_not * R_not)
print("Probability that the problem is solved:", round(prob_solved, 4))

#3

import heapq
def dijkstra(graph, start):
    dist = {node: float('inf') for node in graph}
    dist[start] = 0
    pq = [(0, start)]

    while pq:
        current_dist, current_node = heapq.heappop(pq)

        if current_dist > dist[current_node]:
            continue

        for neighbor, weight in graph[current_node]:
            distance = current_dist + weight
            if distance < dist[neighbor]:
                dist[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))

    return dist

graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('C', 2), ('D', 5)],
    'C': [('D', 1)],
    'D': []
}

print("Shortest distances from A:", dijkstra(graph, 'A'))


#4

def bellman_ford(graph, V, E, src):
    dist = [float('inf')] * V
    dist[src] = 0
    for _ in range(V - 1):
        for u, v, w in E:
            if dist[u] != float('inf') and dist[u] + w < dist[v]:
                dist[v] = dist[u] + w
    for u, v, w in E:
        if dist[u] != float('inf') and dist[u] + w < dist[v]:
            print("Graph contains negative weight cycle")
            return
    print("Vertex distances from source:", dist)
V = 5
edges = [
    (0, 1, -1), (0, 2, 4),
    (1, 2, 3), (1, 3, 2),
    (1, 4, 2), (3, 2, 5),
    (3, 1, 1), (4, 3, -3)
]
bellman_ford(graph=None, V=V, E=edges, src=0)


#5

P_A = 1/3
P_B = 1/3
P_C = 1/3

P_R_given_A = 3/10
P_R_given_B = 8/10
P_R_given_C = 4/10

P_R = (P_A * P_R_given_A) + (P_B * P_R_given_B) + (P_C * P_R_given_C)

# Bayes' theorem: P(C|R) = P(C)*P(R|C) / P(R)
P_C_given_R = (P_C * P_R_given_C) / P_R

print("Probability that red ball is from third bag:", round(P_C_given_R, 4))



